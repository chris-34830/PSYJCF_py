Option Explicit

' Constantes de configuration du portefeuille
Const ESG_RATIO As Double = 0.7
Const CRYPTO_RATIO As Double = 0.3
Const MAX_WEIGHT_PER_ASSET As Double = 0.15
Const MAX_CRYPTO_VOL_CONTRIB As Double = 0.4
Const RISK_FREE_RATE As Double = 0

' Indices des actifs
Const FIRST_ESG_ASSET As Integer = 2   ' Colonne B
Const LAST_ESG_ASSET As Integer = 11   ' Colonne K (10 actifs ESG)
Const FIRST_CRYPTO_ASSET As Integer = 12  ' Colonne L
Const LAST_CRYPTO_ASSET As Integer = 14  ' Colonne N (3 cryptomonnaies)

'====================================================================
' Procédure principale d'optimisation
'====================================================================
Sub OptimiserPortefeuille()
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    ' Créer ou nettoyer les feuilles de résultats
    CreateSheetsIfNotExist

    Dim dataRange As Range
    Set dataRange = Sheets("Data").Range("A1:N1293")
    
    ' Lire les données et calculer les rendements via un tableau
    Dim returns As Variant
    returns = CalculateReturns(dataRange)
    
    Dim meanReturns As Variant, covMatrix As Variant
    meanReturns = CalculateMeanReturns(returns)
    covMatrix = CalculateCovarianceMatrix(returns)
    
    Dim resultsMV As Variant, resultsCF As Variant, resultsLPM As Variant, resultsMEG As Variant
    resultsMV = OptimizeMeanVariance(meanReturns, covMatrix)
    resultsCF = OptimizeMeanVaRCornishFisher(returns, meanReturns, covMatrix)
    resultsLPM = OptimizeMeanLPM(returns, meanReturns)
    resultsMEG = OptimizeMeanExtendedGini(returns, meanReturns)
    
    DisplayResults resultsMV, resultsCF, resultsLPM, resultsMEG, meanReturns, covMatrix, returns
    GenerateEfficientFrontier meanReturns, covMatrix, returns
    
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    
    MsgBox "Optimisation de portefeuille terminée ! Vérifiez les résultats dans les feuilles créées.", vbInformation
End Sub

'====================================================================
' Création (ou réinitialisation) des feuilles nécessaires
'====================================================================
Sub CreateSheetsIfNotExist()
    Dim sheetNames As Variant
    sheetNames = Array("Résultats", "Frontières", "Portefeuilles")
    
    Dim i As Integer
    For i = LBound(sheetNames) To UBound(sheetNames)
        If Not SheetExists(sheetNames(i)) Then
            Sheets.Add(After:=Sheets(Sheets.Count)).Name = sheetNames(i)
        Else
            Sheets(sheetNames(i)).Cells.Clear
        End If
    Next i
End Sub

' Vérifie si une feuille existe
Function SheetExists(sheetName As String) As Boolean
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = Sheets(sheetName)
    On Error GoTo 0
    SheetExists = Not ws Is Nothing
End Function

'====================================================================
' Calcul des rendements à partir des prix
' Utilise un tableau pour limiter les accès à la feuille
'====================================================================
Function CalculateReturns(dataRange As Range) As Variant
    Dim dataArr As Variant
    dataArr = dataRange.Value
    
    Dim nbRows As Long, nbCols As Long
    nbRows = UBound(dataArr, 1) - 1   ' -1 car on calcule les rendements entre deux lignes
    nbCols = LAST_CRYPTO_ASSET - FIRST_ESG_ASSET + 1
    
    Dim retArr() As Double
    ReDim retArr(1 To nbRows, 1 To nbCols)
    
    Dim i As Long, j As Long
    For i = 1 To nbRows
        For j = 1 To nbCols
            Dim currVal As Double, prevVal As Double
            currVal = dataArr(i + 1, j + FIRST_ESG_ASSET - 1)
            prevVal = dataArr(i, j + FIRST_ESG_ASSET - 1)
            If currVal > 0 And prevVal > 0 Then
                retArr(i, j) = Log(currVal / prevVal)
            Else
                retArr(i, j) = 0
            End If
        Next j
    Next i
    
    CalculateReturns = retArr
End Function

'====================================================================
' Calcul des rendements moyens annualisés
'====================================================================
Function CalculateMeanReturns(returns As Variant) As Variant
    Dim nbRows As Long, nbCols As Long
    nbRows = UBound(returns, 1)
    nbCols = UBound(returns, 2)
    
    Dim meanArr() As Double
    ReDim meanArr(1 To nbCols)
    
    Dim i As Long, j As Long, sum As Double
    For j = 1 To nbCols
        sum = 0
        For i = 1 To nbRows
            sum = sum + returns(i, j)
        Next i
        meanArr(j) = (sum / nbRows) * 252   ' Annualisation (≈252 jours de trading)
    Next j
    
    CalculateMeanReturns = meanArr
End Function

'====================================================================
' Calcul de la matrice de covariance annualisée
'====================================================================
Function CalculateCovarianceMatrix(returns As Variant) As Variant
    Dim nbRows As Long, nbCols As Long
    nbRows = UBound(returns, 1)
    nbCols = UBound(returns, 2)
    
    Dim means() As Double
    ReDim means(1 To nbCols)
    
    Dim i As Long, j As Long, k As Long, sum As Double
    For j = 1 To nbCols
        sum = 0
        For i = 1 To nbRows
            sum = sum + returns(i, j)
        Next i
        means(j) = sum / nbRows
    Next j
    
    Dim covMat() As Double
    ReDim covMat(1 To nbCols, 1 To nbCols)
    Dim covariance As Double
    For j = 1 To nbCols
        For k = 1 To nbCols
            covariance = 0
            For i = 1 To nbRows
                covariance = covariance + (returns(i, j) - means(j)) * (returns(i, k) - means(k))
            Next i
            covMat(j, k) = (covariance / (nbRows - 1)) * 252   ' Annualisation
        Next k
    Next j
    
    CalculateCovarianceMatrix = covMat
End Function

'====================================================================
' Optimisation Mean-Variance (Markowitz) par gradient projeté simplifié
'====================================================================
Function OptimizeMeanVariance(meanReturns As Variant, covMatrix As Variant) As Variant
    Dim nbAssets As Integer
    nbAssets = UBound(meanReturns)
    
    Dim esgAssets As Integer, cryptoAssets As Integer
    esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
    cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
    
    Dim weights() As Double, bestWeights() As Double
    ReDim weights(1 To nbAssets)
    ReDim bestWeights(1 To nbAssets)
    
    Dim i As Integer, j As Integer
    For i = 1 To esgAssets
        weights(i) = ESG_RATIO / esgAssets
    Next i
    For i = esgAssets + 1 To nbAssets
        weights(i) = CRYPTO_RATIO / cryptoAssets
    Next i
    
    Dim iterations As Long, learningRate As Double, bestSharpe As Double
    iterations = 10000
    learningRate = 0.01
    bestSharpe = -1000
    
    Dim portfolioReturn As Double, portfolioRisk As Double, sharpeRatio As Double, assetSharpe As Double
    For i = 1 To iterations
        portfolioReturn = CalculatePortfolioReturn(weights, meanReturns)
        portfolioRisk = CalculatePortfolioRisk(weights, covMatrix)
        If portfolioRisk <> 0 Then
            sharpeRatio = (portfolioReturn - RISK_FREE_RATE) / portfolioRisk
        Else
            sharpeRatio = 0
        End If
        
        If sharpeRatio > bestSharpe Then
            bestSharpe = sharpeRatio
            For j = 1 To nbAssets
                bestWeights(j) = weights(j)
            Next j
        End If
        
        For j = 1 To nbAssets
            assetSharpe = meanReturns(j) / Sqr(covMatrix(j, j))
            weights(j) = weights(j) + learningRate * (assetSharpe - sharpeRatio)
        Next j
        
        weights = ProjectOnConstraints(weights, esgAssets, cryptoAssets, covMatrix)
        learningRate = learningRate * 0.9995
    Next i
    
    OptimizeMeanVariance = bestWeights
End Function

'====================================================================
' Optimisation Mean-VaR Cornish-Fisher
'====================================================================
Function OptimizeMeanVaRCornishFisher(returns As Variant, meanReturns As Variant, covMatrix As Variant) As Variant
    Dim nbAssets As Integer
    nbAssets = UBound(meanReturns)
    
    Dim skewness() As Double, kurtosis() As Double
    ReDim skewness(1 To nbAssets)
    ReDim kurtosis(1 To nbAssets)
    
    Dim i As Long, j As Long, nbObs As Long
    nbObs = UBound(returns, 1)
    Dim meanVal As Double, variance As Double, sumCube As Double, sumQuad As Double, diff As Double
    For j = 1 To nbAssets
        meanVal = 0
        For i = 1 To nbObs
            meanVal = meanVal + returns(i, j)
        Next i
        meanVal = meanVal / nbObs
        
        variance = 0: sumCube = 0: sumQuad = 0
        For i = 1 To nbObs
            diff = returns(i, j) - meanVal
            variance = variance + diff ^ 2
            sumCube = sumCube + diff ^ 3
            sumQuad = sumQuad + diff ^ 4
        Next i
        variance = variance / (nbObs - 1)
        If variance <> 0 Then
            skewness(j) = (sumCube / nbObs) / (variance ^ 1.5)
        Else
            skewness(j) = 0
        End If
        kurtosis(j) = (sumQuad / nbObs) / (variance ^ 2) - 3
    Next j
    
    Dim markowitz() As Double
    markowitz = OptimizeMeanVariance(meanReturns, covMatrix)
    
    Dim adjustedWeights() As Double
    ReDim adjustedWeights(1 To nbAssets)
    For i = 1 To nbAssets
        adjustedWeights(i) = markowitz(i) * (1 + 0.1 * skewness(i))
    Next i
    
    Dim esgAssets As Integer, cryptoAssets As Integer
    esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
    cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
    
    adjustedWeights = ProjectOnConstraints(adjustedWeights, esgAssets, cryptoAssets, covMatrix)
    OptimizeMeanVaRCornishFisher = adjustedWeights
End Function

'====================================================================
' Optimisation Mean-Lower Partial Moment (LPM)
'====================================================================
Function OptimizeMeanLPM(returns As Variant, meanReturns As Variant) As Variant
    Dim nbAssets As Integer, nbObs As Long
    nbAssets = UBound(meanReturns)
    nbObs = UBound(returns, 1)
    
    Dim lpm() As Double, weights() As Double
    ReDim lpm(1 To nbAssets)
    ReDim weights(1 To nbAssets)
    
    Dim i As Long, j As Long
    Dim targetReturn As Double
    targetReturn = 0   ' Seuil de rendement
    
    For j = 1 To nbAssets
        lpm(j) = 0
        For i = 1 To nbObs
            If returns(i, j) < targetReturn Then
                lpm(j) = lpm(j) + (targetReturn - returns(i, j)) ^ 2
            End If
        Next i
        lpm(j) = lpm(j) / nbObs
    Next j
    
    Dim sumInvLPM As Double
    sumInvLPM = 0
    For j = 1 To nbAssets
        If lpm(j) < 0.0001 Then lpm(j) = 0.0001
        sumInvLPM = sumInvLPM + 1 / lpm(j)
    Next j
    For j = 1 To nbAssets
        weights(j) = (1 / lpm(j)) / sumInvLPM
    Next j
    
    Dim esgAssets As Integer, cryptoAssets As Integer
    esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
    cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
    
    Dim covMatrix As Variant
    covMatrix = CalculateCovarianceMatrix(returns)
    weights = ProjectOnConstraints(weights, esgAssets, cryptoAssets, covMatrix)
    
    OptimizeMeanLPM = weights
End Function

'====================================================================
' Optimisation Mean-Extended Gini (approximation par semi-variance)
'====================================================================
Function OptimizeMeanExtendedGini(returns As Variant, meanReturns As Variant) As Variant
    Dim nbAssets As Integer, nbObs As Long
    nbAssets = UBound(meanReturns)
    nbObs = UBound(returns, 1)
    
    Dim semiVariance() As Double, weights() As Double
    ReDim semiVariance(1 To nbAssets)
    ReDim weights(1 To nbAssets)
    
    Dim i As Long, j As Long, meanVal As Double
    For j = 1 To nbAssets
        meanVal = 0
        For i = 1 To nbObs
            meanVal = meanVal + returns(i, j)
        Next i
        meanVal = meanVal / nbObs
        
        semiVariance(j) = 0
        For i = 1 To nbObs
            If returns(i, j) < meanVal Then
                semiVariance(j) = semiVariance(j) + (returns(i, j) - meanVal) ^ 2
            End If
        Next i
        semiVariance(j) = semiVariance(j) / nbObs
    Next j
    
    Dim sumInvSV As Double
    sumInvSV = 0
    For j = 1 To nbAssets
        If semiVariance(j) < 0.0001 Then semiVariance(j) = 0.0001
        sumInvSV = sumInvSV + 1 / semiVariance(j)
    Next j
    For j = 1 To nbAssets
        weights(j) = (1 / semiVariance(j)) / sumInvSV
    Next j
    
    Dim esgAssets As Integer, cryptoAssets As Integer
    esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
    cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
    
    Dim covMatrix As Variant
    covMatrix = CalculateCovarianceMatrix(returns)
    weights = ProjectOnConstraints(weights, esgAssets, cryptoAssets, covMatrix)
    
    OptimizeMeanExtendedGini = weights
End Function

'====================================================================
' Projection des poids sur les contraintes du problème
' - Limite à MAX_WEIGHT_PER_ASSET
' - Normalise les parts ESG et Crypto
' - Ajuste la contribution en volatilité des cryptomonnaies
'====================================================================
Function ProjectOnConstraints(weights As Variant, esgAssets As Integer, cryptoAssets As Integer, covMatrix As Variant) As Variant
    Dim nbAssets As Integer, i As Integer, j As Integer
    nbAssets = UBound(weights)
    
    Dim projectedWeights() As Double
    ReDim projectedWeights(1 To nbAssets)
    
    For i = 1 To nbAssets
        ' Contraintes de borne inférieure (0) et supérieure (MAX_WEIGHT_PER_ASSET)
        projectedWeights(i) = Application.WorksheetFunction.Min(Application.WorksheetFunction.Max(weights(i), 0), MAX_WEIGHT_PER_ASSET)
    Next i
    
    Dim sumESG As Double, sumCrypto As Double
    sumESG = 0: sumCrypto = 0
    For i = 1 To esgAssets
        sumESG = sumESG + projectedWeights(i)
    Next i
    If sumESG > 0 Then
        For i = 1 To esgAssets
            projectedWeights(i) = projectedWeights(i) * ESG_RATIO / sumESG
        Next i
    End If
    
    For i = esgAssets + 1 To nbAssets
        sumCrypto = sumCrypto + projectedWeights(i)
    Next i
    If sumCrypto > 0 Then
        For i = esgAssets + 1 To nbAssets
            projectedWeights(i) = projectedWeights(i) * CRYPTO_RATIO / sumCrypto
        Next i
    End If
    
    Dim portfolioRisk As Double
    portfolioRisk = CalculatePortfolioRisk(projectedWeights, covMatrix)
    
    Dim cryptoContrib As Double
    cryptoContrib = 0
    For i = esgAssets + 1 To nbAssets
        For j = 1 To nbAssets
            cryptoContrib = cryptoContrib + projectedWeights(i) * projectedWeights(j) * covMatrix(i, j)
        Next j
    Next i
    cryptoContrib = cryptoContrib / (portfolioRisk ^ 2)
    
    If cryptoContrib > MAX_CRYPTO_VOL_CONTRIB Then
        Dim adjustFactor As Double
        adjustFactor = Sqr(MAX_CRYPTO_VOL_CONTRIB / cryptoContrib)
        For i = esgAssets + 1 To nbAssets
            projectedWeights(i) = projectedWeights(i) * adjustFactor
        Next i
        Dim totalCryptoReduc As Double
        totalCryptoReduc = CRYPTO_RATIO * (1 - adjustFactor)
        For i = 1 To esgAssets
            projectedWeights(i) = projectedWeights(i) * (ESG_RATIO + totalCryptoReduc) / ESG_RATIO
        Next i
    End If
    
    ProjectOnConstraints = projectedWeights
End Function

'====================================================================
' Calcul du rendement du portefeuille
'====================================================================
Function CalculatePortfolioReturn(weights As Variant, meanReturns As Variant) As Double
    Dim i As Integer, portReturn As Double
    portReturn = 0
    For i = 1 To UBound(weights)
        portReturn = portReturn + weights(i) * meanReturns(i)
    Next i
    CalculatePortfolioReturn = portReturn
End Function

'====================================================================
' Calcul du risque (écart-type) du portefeuille
'====================================================================
Function CalculatePortfolioRisk(weights As Variant, covMatrix As Variant) As Double
    Dim i As Integer, j As Integer, riskSq As Double
    riskSq = 0
    For i = 1 To UBound(weights)
        For j = 1 To UBound(weights)
            riskSq = riskSq + weights(i) * weights(j) * covMatrix(i, j)
        Next j
    Next i
    CalculatePortfolioRisk = Sqr(riskSq)
End Function

'====================================================================
' Affichage des résultats et création d'un graphique récapitulatif
'====================================================================
Sub DisplayResults(resultsMV As Variant, resultsCF As Variant, resultsLPM As Variant, resultsMEG As Variant, _
                   meanReturns As Variant, covMatrix As Variant, returns As Variant)
    Dim ws As Worksheet
    Set ws = Sheets("Résultats")
    ws.Cells.Clear
    
    With ws
        .Range("A1").Resize(1, 4).Value = Array("Méthode d'optimisation", "Rendement", "Risque", "Ratio de Sharpe")
        
        Dim esgAssets As Integer, cryptoAssets As Integer, i As Integer
        esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
        cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
        
        ' Création des en-têtes pour les poids
        For i = 1 To esgAssets
            .Cells(1, 4 + i).Value = "ESG " & i
        Next i
        For i = 1 To cryptoAssets
            .Cells(1, 4 + esgAssets + i).Value = "Crypto " & i
        Next i
        
        Dim ret As Double, risk As Double, sharpe As Double
        
        ' Mean-Variance (Markowitz)
        .Cells(2, 1).Value = "Mean-Variance (Markowitz)"
        ret = CalculatePortfolioReturn(resultsMV, meanReturns)
        risk = CalculatePortfolioRisk(resultsMV, covMatrix)
        .Cells(2, 2).Value = ret
        .Cells(2, 3).Value = risk
        If risk <> 0 Then
            sharpe = (ret - RISK_FREE_RATE) / risk
        Else
            sharpe = 0
        End If
        .Cells(2, 4).Value = sharpe
        For i = 1 To UBound(resultsMV)
            .Cells(2, 4 + i).Value = resultsMV(i)
        Next i
        
        ' Mean-VaR Cornish-Fisher
        .Cells(3, 1).Value = "Mean-VaR Cornish-Fisher"
        ret = CalculatePortfolioReturn(resultsCF, meanReturns)
        risk = CalculatePortfolioRisk(resultsCF, covMatrix)
        .Cells(3, 2).Value = ret
        .Cells(3, 3).Value = risk
        If risk <> 0 Then
            sharpe = (ret - RISK_FREE_RATE) / risk
        Else
            sharpe = 0
        End If
        .Cells(3, 4).Value = sharpe
        For i = 1 To UBound(resultsCF)
            .Cells(3, 4 + i).Value = resultsCF(i)
        Next i
        
        ' Mean-Lower Partial Moment
        .Cells(4, 1).Value = "Mean-Lower Partial Moment"
        ret = CalculatePortfolioReturn(resultsLPM, meanReturns)
        risk = CalculatePortfolioRisk(resultsLPM, covMatrix)
        .Cells(4, 2).Value = ret
        .Cells(4, 3).Value = risk
        If risk <> 0 Then
            sharpe = (ret - RISK_FREE_RATE) / risk
        Else
            sharpe = 0
        End If
        .Cells(4, 4).Value = sharpe
        For i = 1 To UBound(resultsLPM)
            .Cells(4, 4 + i).Value = resultsLPM(i)
        Next i
        
        ' Mean-Extended Gini
        .Cells(5, 1).Value = "Mean-Extended Gini"
        ret = CalculatePortfolioReturn(resultsMEG, meanReturns)
        risk = CalculatePortfolioRisk(resultsMEG, covMatrix)
        .Cells(5, 2).Value = ret
        .Cells(5, 3).Value = risk
        If risk <> 0 Then
            sharpe = (ret - RISK_FREE_RATE) / risk
        Else
            sharpe = 0
        End If
        .Cells(5, 4).Value = sharpe
        For i = 1 To UBound(resultsMEG)
            .Cells(5, 4 + i).Value = resultsMEG(i)
        Next i
        
        ' Déterminer la meilleure méthode selon le ratio de Sharpe
        Dim maxSharpe As Double, bestRow As Integer
        maxSharpe = .Cells(2, 4).Value
        bestRow = 2
        For i = 3 To 5
            If .Cells(i, 4).Value > maxSharpe Then
                maxSharpe = .Cells(i, 4).Value
                bestRow = i
            End If
        Next i
        
        ' Mise en évidence
        .Range("A" & bestRow & ":D" & bestRow).Interior.Color = RGB(200, 255, 200)
        .Range("A7").Value = "Conclusion:"
        .Range("A8").Value = "La méthode la plus performante selon le ratio de Sharpe est : " & .Cells(bestRow, 1).Value
        .Range("A9").Value = "Avec un ratio de Sharpe de : " & Round(maxSharpe, 4)
        
        .Range("A1:Z1").Font.Bold = True
        .Columns("A:Z").AutoFit
        
        ' Création d'un graphique comparatif
        Dim chartObj As ChartObject
        Set chartObj = .ChartObjects.Add(Left:=50, Width:=450, Top:=200, Height:=250)
        With chartObj.Chart
            .ChartType = xlColumnClustered
            .SetSourceData Source:=.Parent.Range("A1:D5")
            .HasTitle = True
            .ChartTitle.Text = "Comparaison des méthodes d'optimisation"
            .Axes(xlValue).HasTitle = True
            .Axes(xlValue).AxisTitle.Text = "Valeur"
            .Axes(xlCategory).HasTitle = True
            .Axes(xlCategory).AxisTitle.Text = "Métrique"
            .HasLegend = True
            .Legend.Position = xlLegendPositionBottom
        End With
    End With
End Sub

'====================================================================
' Génération de la frontière efficiente et affichage graphique
'====================================================================
Sub GenerateEfficientFrontier(meanReturns As Variant, covMatrix As Variant, returns As Variant)
    Dim ws As Worksheet
    Set ws = Sheets("Frontières")
    ws.Cells.Clear
    ws.Range("A1").Value = "Risque"
    ws.Range("B1").Value = "Rendement"
    ws.Range("C1").Value = "Méthode"
    
    Dim nbPoints As Integer
    nbPoints = 20
    
    ' Génération pour la méthode Mean-Variance
    GenerateFrontierPoints meanReturns, covMatrix, "Mean-Variance", ws, 2, nbPoints
    
    Dim resultsCF As Variant, resultsLPM As Variant, resultsMEG As Variant
    resultsCF = OptimizeMeanVaRCornishFisher(returns, meanReturns, covMatrix)
    resultsLPM = OptimizeMeanLPM(returns, meanReturns)
    resultsMEG = OptimizeMeanExtendedGini(returns, meanReturns)
    
    GenerateFrontierPoints meanReturns, covMatrix, "Mean-VaR CF", ws, 2 + nbPoints, nbPoints, resultsCF
    GenerateFrontierPoints meanReturns, covMatrix, "Mean-LPM", ws, 2 + 2 * nbPoints, nbPoints, resultsLPM
    GenerateFrontierPoints meanReturns, covMatrix, "Mean-Gini", ws, 2 + 3 * nbPoints, nbPoints, resultsMEG
    
    Dim chartObj As ChartObject
    Set chartObj = ws.ChartObjects.Add(Left:=350, Width:=500, Top:=50, Height:=400)
    With chartObj.Chart
        .ChartType = xlXYScatterSmooth
        .SetSourceData Source:=ws.Range("A2:C" & (2 + 4 * nbPoints - 1))
        .HasTitle = True
        .ChartTitle.Text = "Frontières Efficientes"
        .Axes(xlValue).HasTitle = True
        .Axes(xlValue).AxisTitle.Text = "Rendement"
        .Axes(xlCategory).HasTitle = True
        .Axes(xlCategory).AxisTitle.Text = "Risque"
        .HasLegend = True
        .Legend.Position = xlLegendPositionBottom
        
        ' Ajout des séries pour chaque méthode
        .SeriesCollection(1).Name = "Mean-Variance"
        
        Dim series2 As Series
        Set series2 = .SeriesCollection.NewSeries
        series2.XValues = ws.Range("A" & (2 + nbPoints) & ":A" & (2 + 2 * nbPoints - 1))
        series2.Values = ws.Range("B" & (2 + nbPoints) & ":B" & (2 + 2 * nbPoints - 1))
        series2.Name = "Mean-VaR CF"
        
        Dim series3 As Series
        Set series3 = .SeriesCollection.NewSeries
        series3.XValues = ws.Range("A" & (2 + 2 * nbPoints) & ":A" & (2 + 3 * nbPoints - 1))
        series3.Values = ws.Range("B" & (2 + 2 * nbPoints) & ":B" & (2 + 3 * nbPoints - 1))
        series3.Name = "Mean-LPM"
        
        Dim series4 As Series
        Set series4 = .SeriesCollection.NewSeries
        series4.XValues = ws.Range("A" & (2 + 3 * nbPoints) & ":A" & (2 + 4 * nbPoints - 1))
        series4.Values = ws.Range("B" & (2 + 3 * nbPoints) & ":B" & (2 + 4 * nbPoints - 1))
        series4.Name = "Mean-Gini"
    End With
    
    ws.Range("A1:C1").Font.Bold = True
    ws.Columns("A:C").AutoFit
End Sub

'====================================================================
' Génération de points sur la frontière efficiente
'====================================================================
Sub GenerateFrontierPoints(meanReturns As Variant, covMatrix As Variant, methodName As String, _
                           ws As Worksheet, startRow As Integer, nbPoints As Integer, Optional initialWeights As Variant = Null)
    Dim nbAssets As Integer
    nbAssets = UBound(meanReturns)
    
    Dim weights() As Double
    ReDim weights(1 To nbAssets)
    
    Dim i As Integer, j As Integer
    If IsMissing(initialWeights) Or IsNull(initialWeights) Then
        For i = 1 To nbAssets
            weights(i) = 1 / nbAssets
        Next i
    Else
        For i = 1 To nbAssets
            weights(i) = initialWeights(i)
        Next i
    End If
    
    Dim initialReturn As Double, initialRisk As Double
    initialReturn = CalculatePortfolioReturn(weights, meanReturns)
    initialRisk = CalculatePortfolioRisk(weights, covMatrix)
    
    Dim esgAssets As Integer, cryptoAssets As Integer
    esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
    cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
    
    Dim targetRisk As Double, tempWeights() As Double
    For i = 0 To nbPoints - 1
        targetRisk = initialRisk * (0.7 + i * 0.03)
        ReDim tempWeights(1 To nbAssets)
        For j = 1 To nbAssets
            tempWeights(j) = weights(j)
        Next j
        
        Dim bestAsset As Integer, worstAsset As Integer, bestRatio As Double, worstRatio As Double, ratio As Double
        bestRatio = meanReturns(1) / Sqr(covMatrix(1, 1))
        worstRatio = bestRatio
        bestAsset = 1: worstAsset = 1
        For j = 2 To nbAssets
            ratio = meanReturns(j) / Sqr(covMatrix(j, j))
            If ratio > bestRatio Then bestRatio = ratio: bestAsset = j
            If ratio < worstRatio Then worstRatio = ratio: worstAsset = j
        Next j
        
        Dim adjustFactor As Double, k As Integer
        If targetRisk > initialRisk Then
            For j = 1 To 5
                adjustFactor = 0.02
                Dim highestVar As Double, riskiestAsset As Integer
                highestVar = covMatrix(1, 1)
                riskiestAsset = 1
                For k = 2 To nbAssets
                    If covMatrix(k, k) > highestVar Then highestVar = covMatrix(k, k): riskiestAsset = k
                Next k
                If tempWeights(riskiestAsset) < MAX_WEIGHT_PER_ASSET Then
                    tempWeights(riskiestAsset) = tempWeights(riskiestAsset) + adjustFactor
                    For k = 1 To nbAssets
                        If k <> riskiestAsset Then tempWeights(k) = tempWeights(k) * (1 - adjustFactor)
                    Next k
                    tempWeights = ProjectOnConstraints(tempWeights, esgAssets, cryptoAssets, covMatrix)
                    If CalculatePortfolioRisk(tempWeights, covMatrix) >= targetRisk Then Exit For
                End If
            Next j
        Else
            For j = 1 To 5
                adjustFactor = 0.02
                Dim lowestVar As Double, safestAsset As Integer
                lowestVar = covMatrix(1, 1)
                safestAsset = 1
                For k = 2 To nbAssets
                    If covMatrix(k, k) < lowestVar Then lowestVar = covMatrix(k, k): safestAsset = k
                Next k
                If tempWeights(safestAsset) < MAX_WEIGHT_PER_ASSET Then
                    tempWeights(safestAsset) = tempWeights(safestAsset) + adjustFactor
                    For k = 1 To nbAssets
                        If k <> safestAsset Then tempWeights(k) = tempWeights(k) * (1 - adjustFactor)
                    Next k
                    tempWeights = ProjectOnConstraints(tempWeights, esgAssets, cryptoAssets, covMatrix)
                    If CalculatePortfolioRisk(tempWeights, covMatrix) <= targetRisk Then Exit For
                End If
            Next j
        End If
        
        ws.Cells(startRow + i, 1).Value = CalculatePortfolioRisk(tempWeights, covMatrix)
        ws.Cells(startRow + i, 2).Value = CalculatePortfolioReturn(tempWeights, meanReturns)
        ws.Cells(startRow + i, 3).Value = methodName
    Next i
End Sub
