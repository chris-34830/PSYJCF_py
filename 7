Option Explicit

' Constants pour la configuration du portefeuille
Const ESG_RATIO As Double = 0.7
Const CRYPTO_RATIO As Double = 0.3
Const MAX_WEIGHT_PER_ASSET As Double = 0.15
Const MAX_CRYPTO_VOL_CONTRIB As Double = 0.4
Const RISK_FREE_RATE As Double = 0

' Indices des actifs
Const FIRST_ESG_ASSET As Integer = 2    ' Colonne B
Const LAST_ESG_ASSET As Integer = 11     ' Colonne K (10 actifs ESG)
Const FIRST_CRYPTO_ASSET As Integer = 12 ' Colonne L
Const LAST_CRYPTO_ASSET As Integer = 14  ' Colonne N (3 cryptomonnaies)

'***********************************************************************
' Sous-procédure principale
'***********************************************************************
Sub OptimiserPortefeuille()
    Dim dataRange As Range
    Dim returns As Variant, meanReturns As Variant, covMatrix As Variant
    Dim nbAssets As Integer
    Dim resultsMV As Variant, resultsCF As Variant, resultsLPM As Variant, resultsMEG As Variant
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    ' Créer des feuilles pour les résultats s'ils n'existent pas
    CreateSheetsIfNotExist
    
    ' Étape 1: Lire les données et calculer les rendements
    Set dataRange = Sheets("Data").Range("A1:N1293")
    
    nbAssets = LAST_CRYPTO_ASSET - FIRST_ESG_ASSET + 1 ' Nombre total d'actifs
    
    returns = CalculateReturns(dataRange)
    
    ' Étape 2: Calculer les matrices nécessaires pour l'optimisation
    meanReturns = CalculateMeanReturns(returns)
    covMatrix = CalculateCovarianceMatrix(returns)
    
    ' Étape 3: Optimiser avec les différentes méthodes
    resultsMV = OptimizeMeanVariance(meanReturns, covMatrix)
    resultsCF = OptimizeMeanVaRCornishFisher(returns, meanReturns, covMatrix)
    resultsLPM = OptimizeMeanLPM(returns, meanReturns)
    resultsMEG = OptimizeMeanExtendedGini(returns, meanReturns)
    
    ' Étape 4: Calculer les performances et comparer les approches
    DisplayResults resultsMV, resultsCF, resultsLPM, resultsMEG, meanReturns, covMatrix, returns
    
    ' Étape 5: Générer les frontières efficientes
    GenerateEfficientFrontier meanReturns, covMatrix, returns
    
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    
    MsgBox "Optimisation de portefeuille terminée! Vérifiez les résultats dans les feuilles créées.", vbInformation
End Sub

'***********************************************************************
' Crée les feuilles nécessaires si elles n'existent pas
'***********************************************************************
Sub CreateSheetsIfNotExist()
    Dim sheetNames As Variant
    Dim i As Integer
    sheetNames = Array("Résultats", "Frontières", "Portefeuilles")
    
    For i = LBound(sheetNames) To UBound(sheetNames)
        If Not SheetExists(sheetNames(i)) Then
            Sheets.Add(After:=Sheets(Sheets.Count)).Name = sheetNames(i)
        Else
            Sheets(sheetNames(i)).Cells.Clear
        End If
    Next i
End Sub

'***********************************************************************
' Vérifie si une feuille existe
'***********************************************************************
Function SheetExists(sheetName As String) As Boolean
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = Sheets(sheetName)
    On Error GoTo 0
    SheetExists = Not ws Is Nothing
End Function

'***********************************************************************
' Calcule les rendements à partir des prix (rendements logarithmiques)
'***********************************************************************
Function CalculateReturns(dataRange As Range) As Variant
    Dim nbRows As Long, nbCols As Long
    Dim i As Long, j As Long
    nbRows = dataRange.Rows.Count - 1  ' -1 car on calcule les rendements
    nbCols = LAST_CRYPTO_ASSET - FIRST_ESG_ASSET + 1
    
    Dim returns() As Double
    ReDim returns(1 To nbRows, 1 To nbCols)
    
    For i = 1 To nbRows
        For j = 1 To nbCols
            If dataRange.Cells(i + 1, j + FIRST_ESG_ASSET - 1).Value > 0 And _
               dataRange.Cells(i, j + FIRST_ESG_ASSET - 1).Value > 0 Then
                returns(i, j) = Log(dataRange.Cells(i + 1, j + FIRST_ESG_ASSET - 1).Value / _
                                    dataRange.Cells(i, j + FIRST_ESG_ASSET - 1).Value)
            Else
                returns(i, j) = 0
            End If
        Next j
    Next i
    
    CalculateReturns = returns
End Function

'***********************************************************************
' Calcule les rendements moyens annualisés
'***********************************************************************
Function CalculateMeanReturns(returns As Variant) As Variant
    Dim nbRows As Long, nbCols As Long
    Dim i As Long, j As Long
    nbRows = UBound(returns, 1)
    nbCols = UBound(returns, 2)
    
    Dim meanReturns() As Double
    ReDim meanReturns(1 To nbCols)
    
    For j = 1 To nbCols
        Dim sumVal As Double
        sumVal = 0
        For i = 1 To nbRows
            sumVal = sumVal + returns(i, j)
        Next i
        meanReturns(j) = (sumVal / nbRows) * 252   ' Annualisation (252 jours de trading)
    Next j
    
    CalculateMeanReturns = meanReturns
End Function

'***********************************************************************
' Calcule la matrice de covariance annualisée
'***********************************************************************
Function CalculateCovarianceMatrix(returns As Variant) As Variant
    Dim nbRows As Long, nbCols As Long
    Dim i As Long, j As Long, k As Long
    nbRows = UBound(returns, 1)
    nbCols = UBound(returns, 2)
    
    Dim meanReturns() As Double
    ReDim meanReturns(1 To nbCols)
    
    ' Calcul des rendements moyens (non annualisés ici)
    For j = 1 To nbCols
        Dim sumVal As Double
        sumVal = 0
        For i = 1 To nbRows
            sumVal = sumVal + returns(i, j)
        Next i
        meanReturns(j) = sumVal / nbRows
    Next j
    
    Dim covMatrix() As Double
    ReDim covMatrix(1 To nbCols, 1 To nbCols)
    
    For j = 1 To nbCols
        For k = 1 To nbCols
            Dim covariance As Double
            covariance = 0
            For i = 1 To nbRows
                covariance = covariance + (returns(i, j) - meanReturns(j)) * (returns(i, k) - meanReturns(k))
            Next i
            covMatrix(j, k) = (covariance / (nbRows - 1)) * 252 ' Annualisation
        Next k
    Next j
    
    CalculateCovarianceMatrix = covMatrix
End Function

'***********************************************************************
' Optimisation Mean-Variance (Markowitz) par algorithme de gradient projeté
'***********************************************************************
Function OptimizeMeanVariance(meanReturns As Variant, covMatrix As Variant) As Variant
    Dim nbAssets As Integer, esgAssets As Integer, cryptoAssets As Integer
    Dim i As Long, j As Integer
    nbAssets = UBound(meanReturns)
    
    esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
    cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
    
    Dim weights() As Double
    ReDim weights(1 To nbAssets)
    
    ' Initialisation des poids égaux par groupe
    For i = 1 To esgAssets
        weights(i) = ESG_RATIO / esgAssets
    Next i
    For i = esgAssets + 1 To nbAssets
        weights(i) = CRYPTO_RATIO / cryptoAssets
    Next i
    
    Dim iterations As Long, learningRate As Double
    Dim bestWeights() As Double, bestSharpe As Double
    ReDim bestWeights(1 To nbAssets)
    
    iterations = 10000
    learningRate = 0.01
    bestSharpe = -1000
    
    Dim portfolioReturn As Double, portfolioRisk As Double, sharpeRatio As Double
    Dim assetSharpe As Double
    
    For i = 1 To iterations
        portfolioReturn = CalculatePortfolioReturn(weights, meanReturns)
        portfolioRisk = CalculatePortfolioRisk(weights, covMatrix)
        
        If portfolioRisk <> 0 Then
            sharpeRatio = (portfolioReturn - RISK_FREE_RATE) / portfolioRisk
        Else
            sharpeRatio = 0
        End If
        
        ' Sauvegarde si meilleur ratio de Sharpe
        If sharpeRatio > bestSharpe Then
            bestSharpe = sharpeRatio
            For j = 1 To nbAssets
                bestWeights(j) = weights(j)
            Next j
        End If
        
        ' Ajustement des poids en fonction du ratio de Sharpe de chaque actif
        For j = 1 To nbAssets
            assetSharpe = 0
            If covMatrix(j, j) > 0 Then
                assetSharpe = meanReturns(j) / Sqr(covMatrix(j, j))
            End If
            weights(j) = weights(j) + learningRate * (assetSharpe - sharpeRatio)
        Next j
        
        ' Projection sur les contraintes
        weights = ProjectOnConstraints(weights, esgAssets, cryptoAssets, covMatrix)
        
        ' Diminution progressive du taux d'apprentissage
        learningRate = learningRate * 0.9995
    Next i
    
    OptimizeMeanVariance = bestWeights
End Function

'***********************************************************************
' Optimisation Mean-VaR Cornish-Fisher
'***********************************************************************
Function OptimizeMeanVaRCornishFisher(returns As Variant, meanReturns As Variant, covMatrix As Variant) As Variant
    Dim nbAssets As Integer, nbObs As Long
    Dim i As Long, j As Long
    nbAssets = UBound(meanReturns)
    nbObs = UBound(returns, 1)
    
    Dim skewness() As Double, kurtosis() As Double
    ReDim skewness(1 To nbAssets)
    ReDim kurtosis(1 To nbAssets)
    
    For j = 1 To nbAssets
        Dim assetMean As Double, variance As Double, sumCube As Double, sumQuad As Double, diff As Double
        assetMean = 0: variance = 0: sumCube = 0: sumQuad = 0
        
        For i = 1 To nbObs
            assetMean = assetMean + returns(i, j)
        Next i
        assetMean = assetMean / nbObs
        
        For i = 1 To nbObs
            diff = returns(i, j) - assetMean
            variance = variance + diff * diff
            sumCube = sumCube + diff ^ 3
            sumQuad = sumQuad + diff ^ 4
        Next i
        
        variance = variance / (nbObs - 1)
        If variance > 0 Then
            skewness(j) = (sumCube / nbObs) / (variance ^ 1.5)
            kurtosis(j) = (sumQuad / nbObs) / (variance ^ 2) - 3
        Else
            skewness(j) = 0
            kurtosis(j) = 0
        End If
    Next j
    
    ' Utiliser les poids obtenus par l'optimisation Markowitz comme base
    Dim markowitz() As Double
    markowitz = OptimizeMeanVariance(meanReturns, covMatrix)
    
    Dim adjustedWeights() As Double
    ReDim adjustedWeights(1 To nbAssets)
    
    For i = 1 To nbAssets
        adjustedWeights(i) = markowitz(i) * (1 + 0.1 * skewness(i))
    Next i
    
    ' Projection sur les contraintes
    Dim esgAssets As Integer, cryptoAssets As Integer
    esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
    cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
    adjustedWeights = ProjectOnConstraints(adjustedWeights, esgAssets, cryptoAssets, covMatrix)
    
    OptimizeMeanVaRCornishFisher = adjustedWeights
End Function

'***********************************************************************
' Optimisation Mean-Lower Partial Moment (LPM)
'***********************************************************************
Function OptimizeMeanLPM(returns As Variant, meanReturns As Variant) As Variant
    Dim nbAssets As Integer, nbObs As Long
    Dim i As Long, j As Long
    nbAssets = UBound(meanReturns)
    nbObs = UBound(returns, 1)
    
    Dim lpm() As Double
    ReDim lpm(1 To nbAssets)
    
    Dim targetReturn As Double
    targetReturn = 0   ' Seuil de rendement
    
    For j = 1 To nbAssets
        lpm(j) = 0
        For i = 1 To nbObs
            If returns(i, j) < targetReturn Then
                lpm(j) = lpm(j) + (targetReturn - returns(i, j)) ^ 2
            End If
        Next i
        lpm(j) = lpm(j) / nbObs
    Next j
    
    Dim weights() As Double, sumInvLPM As Double
    ReDim weights(1 To nbAssets)
    sumInvLPM = 0
    
    For j = 1 To nbAssets
        If lpm(j) < 0.0001 Then lpm(j) = 0.0001
        sumInvLPM = sumInvLPM + 1 / lpm(j)
    Next j
    
    For j = 1 To nbAssets
        weights(j) = (1 / lpm(j)) / sumInvLPM
    Next j
    
    Dim esgAssets As Integer, cryptoAssets As Integer
    esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
    cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
    
    Dim covMatrix As Variant
    covMatrix = CalculateCovarianceMatrix(returns)
    weights = ProjectOnConstraints(weights, esgAssets, cryptoAssets, covMatrix)
    
    OptimizeMeanLPM = weights
End Function

'***********************************************************************
' Optimisation Mean-Extended Gini (approximé via la semi-variance)
'***********************************************************************
Function OptimizeMeanExtendedGini(returns As Variant, meanReturns As Variant) As Variant
    Dim nbAssets As Integer, nbObs As Long
    Dim i As Long, j As Long
    nbAssets = UBound(meanReturns)
    nbObs = UBound(returns, 1)
    
    Dim semiVariance() As Double
    ReDim semiVariance(1 To nbAssets)
    
    For j = 1 To nbAssets
        Dim assetMean As Double
        assetMean = 0
        For i = 1 To nbObs
            assetMean = assetMean + returns(i, j)
        Next i
        assetMean = assetMean / nbObs
        
        semiVariance(j) = 0
        For i = 1 To nbObs
            If returns(i, j) < assetMean Then
                semiVariance(j) = semiVariance(j) + (returns(i, j) - assetMean) ^ 2
            End If
        Next i
        semiVariance(j) = semiVariance(j) / nbObs
    Next j
    
    Dim weights() As Double, sumInvSV As Double
    ReDim weights(1 To nbAssets)
    sumInvSV = 0
    
    For j = 1 To nbAssets
        If semiVariance(j) < 0.0001 Then semiVariance(j) = 0.0001
        sumInvSV = sumInvSV + 1 / semiVariance(j)
    Next j
    
    For j = 1 To nbAssets
        weights(j) = (1 / semiVariance(j)) / sumInvSV
    Next j
    
    Dim esgAssets As Integer, cryptoAssets As Integer
    esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
    cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
    
    Dim covMatrix As Variant
    covMatrix = CalculateCovarianceMatrix(returns)
    weights = ProjectOnConstraints(weights, esgAssets, cryptoAssets, covMatrix)
    
    OptimizeMeanExtendedGini = weights
End Function

'***********************************************************************
' Projection des poids sur les contraintes du problème
'***********************************************************************
Function ProjectOnConstraints(weights As Variant, esgAssets As Integer, cryptoAssets As Integer, covMatrix As Variant) As Variant
    Dim nbAssets As Integer, i As Integer, j As Integer
    nbAssets = UBound(weights)
    
    Dim projectedWeights() As Double
    ReDim projectedWeights(1 To nbAssets)
    
    ' Copier les poids
    For i = 1 To nbAssets
        projectedWeights(i) = weights(i)
    Next i
    
    ' 1. Contrainte de poids maximum par actif et poids non négatifs
    For i = 1 To nbAssets
        If projectedWeights(i) > MAX_WEIGHT_PER_ASSET Then
            projectedWeights(i) = MAX_WEIGHT_PER_ASSET
        End If
        If projectedWeights(i) < 0 Then
            projectedWeights(i) = 0
        End If
    Next i
    
    ' 2. Normaliser les poids des actifs ESG pour maintenir 70%
    Dim sumESG As Double
    sumESG = 0
    For i = 1 To esgAssets
        sumESG = sumESG + projectedWeights(i)
    Next i
    If sumESG > 0 Then
        For i = 1 To esgAssets
            projectedWeights(i) = projectedWeights(i) * ESG_RATIO / sumESG
        Next i
    End If
    
    ' 3. Normaliser les poids des cryptomonnaies pour maintenir 30%
    Dim sumCrypto As Double
    sumCrypto = 0
    For i = esgAssets + 1 To nbAssets
        sumCrypto = sumCrypto + projectedWeights(i)
    Next i
    If sumCrypto > 0 Then
        For i = esgAssets + 1 To nbAssets
            projectedWeights(i) = projectedWeights(i) * CRYPTO_RATIO / sumCrypto
        Next i
    End If
    
    ' 4. Vérifier la contribution à la volatilité des cryptomonnaies
    Dim portfolioRisk As Double
    portfolioRisk = CalculatePortfolioRisk(projectedWeights, covMatrix)
    
    Dim cryptoContrib As Double
    cryptoContrib = 0
    For i = esgAssets + 1 To nbAssets
        For j = 1 To nbAssets
            cryptoContrib = cryptoContrib + projectedWeights(i) * projectedWeights(j) * covMatrix(i, j)
        Next j
    Next i
    If portfolioRisk <> 0 Then
        cryptoContrib = cryptoContrib / (portfolioRisk ^ 2)
    Else
        cryptoContrib = 0
    End If
    
    ' Ajustement si la contribution des cryptos est trop élevée
    If cryptoContrib > MAX_CRYPTO_VOL_CONTRIB Then
        Dim adjustFactor As Double, totalCryptoReduc As Double
        adjustFactor = Sqr(MAX_CRYPTO_VOL_CONTRIB / cryptoContrib)
        
        For i = esgAssets + 1 To nbAssets
            projectedWeights(i) = projectedWeights(i) * adjustFactor
        Next i
        
        totalCryptoReduc = CRYPTO_RATIO * (1 - adjustFactor)
        For i = 1 To esgAssets
            projectedWeights(i) = projectedWeights(i) * (ESG_RATIO + totalCryptoReduc) / ESG_RATIO
        Next i
    End If
    
    ProjectOnConstraints = projectedWeights
End Function

'***********************************************************************
' Calculer le rendement du portefeuille
'***********************************************************************
Function CalculatePortfolioReturn(weights As Variant, meanReturns As Variant) As Double
    Dim portfolioReturn As Double, i As Integer
    portfolioReturn = 0
    For i = 1 To UBound(weights)
        portfolioReturn = portfolioReturn + weights(i) * meanReturns(i)
    Next i
    CalculatePortfolioReturn = portfolioReturn
End Function

'***********************************************************************
' Calculer le risque (écart-type) du portefeuille
'***********************************************************************
Function CalculatePortfolioRisk(weights As Variant, covMatrix As Variant) As Double
    Dim portfolioVar As Double, i As Integer, j As Integer
    portfolioVar = 0
    For i = 1 To UBound(weights)
        For j = 1 To UBound(weights)
            portfolioVar = portfolioVar + weights(i) * weights(j) * covMatrix(i, j)
        Next j
    Next i
    CalculatePortfolioRisk = Sqr(portfolioVar)
End Function

'***********************************************************************
' Afficher les résultats dans la feuille "Résultats"
'***********************************************************************
Sub DisplayResults(resultsMV As Variant, resultsCF As Variant, resultsLPM As Variant, resultsMEG As Variant, _
                   meanReturns As Variant, covMatrix As Variant, returns As Variant)
    Dim ws As Worksheet
    Dim i As Integer, esgAssets As Integer, cryptoAssets As Integer
    Set ws = Sheets("Résultats")
    
    ' En-têtes
    ws.Range("A1").Value = "Méthode d'optimisation"
    ws.Range("B1").Value = "Rendement"
    ws.Range("C1").Value = "Risque"
    ws.Range("D1").Value = "Ratio de Sharpe"
    
    ' En-têtes pour les poids des actifs
    esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
    cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
    For i = 1 To esgAssets
        ws.Cells(1, 4 + i).Value = "ESG " & i
    Next i
    For i = 1 To cryptoAssets
        ws.Cells(1, 4 + esgAssets + i).Value = "Crypto " & i
    Next i
    
    ' Affichage des résultats pour chaque méthode
    
    ' Markowitz
    ws.Range("A2").Value = "Mean-Variance (Markowitz)"
    ws.Range("B2").Value = CalculatePortfolioReturn(resultsMV, meanReturns)
    ws.Range("C2").Value = CalculatePortfolioRisk(resultsMV, covMatrix)
    If ws.Range("C2").Value <> 0 Then
        ws.Range("D2").Value = (ws.Range("B2").Value - RISK_FREE_RATE) / ws.Range("C2").Value
    Else
        ws.Range("D2").Value = 0
    End If
    For i = 1 To UBound(resultsMV)
        ws.Cells(2, 4 + i).Value = resultsMV(i)
    Next i
    
    ' Cornish-Fisher
    ws.Range("A3").Value = "Mean-VaR Cornish-Fisher"
    ws.Range("B3").Value = CalculatePortfolioReturn(resultsCF, meanReturns)
    ws.Range("C3").Value = CalculatePortfolioRisk(resultsCF, covMatrix)
    If ws.Range("C3").Value <> 0 Then
        ws.Range("D3").Value = (ws.Range("B3").Value - RISK_FREE_RATE) / ws.Range("C3").Value
    Else
        ws.Range("D3").Value = 0
    End If
    For i = 1 To UBound(resultsCF)
        ws.Cells(3, 4 + i).Value = resultsCF(i)
    Next i
    
    ' LPM
    ws.Range("A4").Value = "Mean-Lower Partial Moment"
    ws.Range("B4").Value = CalculatePortfolioReturn(resultsLPM, meanReturns)
    ws.Range("C4").Value = CalculatePortfolioRisk(resultsLPM, covMatrix)
    If ws.Range("C4").Value <> 0 Then
        ws.Range("D4").Value = (ws.Range("B4").Value - RISK_FREE_RATE) / ws.Range("C4").Value
    Else
        ws.Range("D4").Value = 0
    End If
    For i = 1 To UBound(resultsLPM)
        ws.Cells(4, 4 + i).Value = resultsLPM(i)
    Next i
    
    ' MEG
    ws.Range("A5").Value = "Mean-Extended Gini"
    ws.Range("B5").Value = CalculatePortfolioReturn(resultsMEG, meanReturns)
    ws.Range("C5").Value = CalculatePortfolioRisk(resultsMEG, covMatrix)
    If ws.Range("C5").Value <> 0 Then
        ws.Range("D5").Value = (ws.Range("B5").Value - RISK_FREE_RATE) / ws.Range("C5").Value
    Else
        ws.Range("D5").Value = 0
    End If
    For i = 1 To UBound(resultsMEG)
        ws.Cells(5, 4 + i).Value = resultsMEG(i)
    Next i
    
    ' Identifier la meilleure méthode selon le ratio de Sharpe
    Dim maxSharpe As Double, bestRow As Integer
    maxSharpe = ws.Range("D2").Value
    bestRow = 2
    For i = 3 To 5
        If ws.Cells(i, 4).Value > maxSharpe Then
            maxSharpe = ws.Cells(i, 4).Value
            bestRow = i
        End If
    Next i
    
    ' Mettre en évidence la ligne correspondante
    ws.Range("A" & bestRow & ":D" & bestRow).Interior.Color = RGB(200, 255, 200)
    
    ws.Range("A7").Value = "Conclusion:"
    ws.Range("A8").Value = "La méthode la plus performante selon le ratio de Sharpe est: " & ws.Cells(bestRow, 1).Value
    ws.Range("A9").Value = "Avec un ratio de Sharpe de: " & Round(maxSharpe, 4)
    
    ws.Range("A1:Z1").Font.Bold = True
    ws.Columns("A:Z").AutoFit
    
    ' Création d'un graphique comparatif
    Dim chartObj As ChartObject
    Set chartObj = ws.ChartObjects.Add(Left:=50, Width:=450, Top:=200, Height:=250)
    With chartObj.Chart
        .ChartType = xlColumnClustered
        .SetSourceData Source:=ws.Range("A1:D5")
        .HasTitle = True
        .ChartTitle.Text = "Comparaison des méthodes d'optimisation"
        .Axes(xlValue).HasTitle = True
        .Axes(xlValue).AxisTitle.Text = "Valeur"
        .Axes(xlCategory).HasTitle = True
        .Axes(xlCategory).AxisTitle.Text = "Métrique"
        .HasLegend = True
        .Legend.Position = xlLegendPositionBottom
    End With
End Sub

'***********************************************************************
' Générer la frontière efficiente et l'afficher dans la feuille "Frontières"
'***********************************************************************
Sub GenerateEfficientFrontier(meanReturns As Variant, covMatrix As Variant, returns As Variant)
    Dim ws As Worksheet
    Dim nbPoints As Integer
    Set ws = Sheets("Frontières")
    
    ws.Range("A1").Value = "Risque"
    ws.Range("B1").Value = "Rendement"
    ws.Range("C1").Value = "Méthode"
    
    nbPoints = 20
    
    ' Générer les points pour la méthode Markowitz
    GenerateFrontierPoints meanReturns, covMatrix, "Mean-Variance", ws, 2, nbPoints
    
    ' Pour les autres méthodes, on utilise les poids optimaux comme point de départ
    Dim resultsCF As Variant, resultsLPM As Variant, resultsMEG As Variant
    resultsCF = OptimizeMeanVaRCornishFisher(returns, meanReturns, covMatrix)
    resultsLPM = OptimizeMeanLPM(returns, meanReturns)
    resultsMEG = OptimizeMeanExtendedGini(returns, meanReturns)
    
    GenerateFrontierPoints meanReturns, covMatrix, "Mean-VaR CF", ws, 2 + nbPoints, nbPoints, resultsCF
    GenerateFrontierPoints meanReturns, covMatrix, "Mean-LPM", ws, 2 + 2 * nbPoints, nbPoints, resultsLPM
    GenerateFrontierPoints meanReturns, covMatrix, "Mean-Gini", ws, 2 + 3 * nbPoints, nbPoints, resultsMEG
    
    ' Création du graphique de la frontière efficiente
    Dim chartObj As ChartObject
    Set chartObj = ws.ChartObjects.Add(Left:=350, Width:=500, Top:=50, Height:=400)
    With chartObj.Chart
        .ChartType = xlXYScatterSmooth
        .SetSourceData Source:=ws.Range("A2:C" & (2 + 4 * nbPoints - 1))
        .HasTitle = True
        .ChartTitle.Text = "Frontières Efficientes"
        .Axes(xlValue).HasTitle = True
        .Axes(xlValue).AxisTitle.Text = "Rendement"
        .Axes(xlCategory).HasTitle = True
        .Axes(xlCategory).AxisTitle.Text = "Risque"
        .HasLegend = True
        .Legend.Position = xlLegendPositionBottom
        
        ' La première série correspond à Mean-Variance
        .SeriesCollection(1).Name = "Mean-Variance"
        
        Dim series2 As Series, series3 As Series, series4 As Series
        Set series2 = .SeriesCollection.NewSeries
        series2.XValues = ws.Range("A" & (2 + nbPoints) & ":A" & (2 + 2 * nbPoints - 1))
        series2.Values = ws.Range("B" & (2 + nbPoints) & ":B" & (2 + 2 * nbPoints - 1))
        series2.Name = "Mean-VaR CF"
        
        Set series3 = .SeriesCollection.NewSeries
        series3.XValues = ws.Range("A" & (2 + 2 * nbPoints) & ":A" & (2 + 3 * nbPoints - 1))
        series3.Values = ws.Range("B" & (2 + 2 * nbPoints) & ":B" & (2 + 3 * nbPoints - 1))
        series3.Name = "Mean-LPM"
        
        Set series4 = .SeriesCollection.NewSeries
        series4.XValues = ws.Range("A" & (2 + 3 * nbPoints) & ":A" & (2 + 4 * nbPoints - 1))
        series4.Values = ws.Range("B" & (2 + 3 * nbPoints) & ":B" & (2 + 4 * nbPoints - 1))
        series4.Name = "Mean-Gini"
    End With
    
    ws.Range("A1:C1").Font.Bold = True
    ws.Columns("A:C").AutoFit
End Sub

'***********************************************************************
' Générer des points sur la frontière efficiente pour une méthode donnée
'***********************************************************************
Sub GenerateFrontierPoints(meanReturns As Variant, covMatrix As Variant, methodName As String, _
                           ws As Worksheet, startRow As Integer, nbPoints As Integer, Optional initialWeights As Variant = Null)
    Dim nbAssets As Integer, i As Integer, j As Integer, k As Integer
    nbAssets = UBound(meanReturns)
    
    Dim weights() As Double
    ReDim weights(1 To nbAssets)
    
    If IsMissing(initialWeights) Or IsNull(initialWeights) Then
        For i = 1 To nbAssets
            weights(i) = 1 / nbAssets
        Next i
    Else
        For i = 1 To nbAssets
            weights(i) = initialWeights(i)
        Next i
    End If
    
    Dim initialReturn As Double, initialRisk As Double
    initialReturn = CalculatePortfolioReturn(weights, meanReturns)
    initialRisk = CalculatePortfolioRisk(weights, covMatrix)
    
    Dim esgAssets As Integer, cryptoAssets As Integer
    esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
    cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
    
    Dim targetRisk As Double, portfolioRisk As Double, portfolioReturn As Double
    Dim tempWeights() As Double
    Dim bestAsset As Integer, worstAsset As Integer
    Dim bestRatio As Double, worstRatio As Double
    Dim ratio As Double
    Dim adjustFactor As Double
    Dim currentRisk As Double, newRisk As Double
    Dim highestVar As Double, riskiestAsset As Integer
    Dim lowestVar As Double, safestAsset As Integer
    
    For i = 0 To nbPoints - 1
        targetRisk = initialRisk * (0.7 + i * 0.03)   ' Variation du risque de 70% à 130%
        
        ReDim tempWeights(1 To nbAssets)
        For j = 1 To nbAssets
            tempWeights(j) = weights(j)
        Next j
        
        ' Identifier l'actif avec le meilleur et le pire rendement/risque
        bestRatio = meanReturns(1) / Sqr(covMatrix(1, 1))
        worstRatio = bestRatio
        bestAsset = 1
        worstAsset = 1
        For j = 2 To nbAssets
            ratio = meanReturns(j) / Sqr(covMatrix(j, j))
            If ratio > bestRatio Then
                bestRatio = ratio
                bestAsset = j
            End If
            If ratio < worstRatio Then
                worstRatio = ratio
                worstAsset = j
            End If
        Next j
        
        ' Ajustement des poids pour atteindre le risque cible
        If targetRisk > initialRisk Then
            ' Augmenter le risque : augmenter le poids de l'actif le plus risqué
            For j = 1 To 5
                adjustFactor = 0.02
                highestVar = covMatrix(1, 1)
                riskiestAsset = 1
                For k = 2 To nbAssets
                    If covMatrix(k, k) > highestVar Then
                        highestVar = covMatrix(k, k)
                        riskiestAsset = k
                    End If
                Next k
                
                If tempWeights(riskiestAsset) < MAX_WEIGHT_PER_ASSET Then
                    tempWeights(riskiestAsset) = tempWeights(riskiestAsset) + adjustFactor
                    For k = 1 To nbAssets
                        If k <> riskiestAsset Then
                            tempWeights(k) = tempWeights(k) * (1 - adjustFactor)
                        End If
                    Next k
                    tempWeights = ProjectOnConstraints(tempWeights, esgAssets, cryptoAssets, covMatrix)
                    currentRisk = CalculatePortfolioRisk(tempWeights, covMatrix)
                    If currentRisk >= targetRisk Then Exit For
                End If
            Next j
        Else
            ' Diminuer le risque : augmenter le poids de l'actif le moins risqué
            For j = 1 To 5
                adjustFactor = 0.02
                lowestVar = covMatrix(1, 1)
                safestAsset = 1
                For k = 2 To nbAssets
                    If covMatrix(k, k) < lowestVar Then
                        lowestVar = covMatrix(k, k)
                        safestAsset = k
                    End If
                Next k
                
                If tempWeights(safestAsset) < MAX_WEIGHT_PER_ASSET Then
                    tempWeights(safestAsset) = tempWeights(safestAsset) + adjustFactor
                    For k = 1 To nbAssets
                        If k <> safestAsset Then
                            tempWeights(k) = tempWeights(k) * (1 - adjustFactor)
                        End If
                    Next k
                    tempWeights = ProjectOnConstraints(tempWeights, esgAssets, cryptoAssets, covMatrix)
                    newRisk = CalculatePortfolioRisk(tempWeights, covMatrix)
                    If newRisk <= targetRisk Then Exit For
                End If
            Next j
        End If
        
        portfolioRisk = CalculatePortfolioRisk(tempWeights, covMatrix)
        portfolioReturn = CalculatePortfolioReturn(tempWeights, meanReturns)
        
        ws.Cells(startRow + i, 1).Value = portfolioRisk
        ws.Cells(startRow + i, 2).Value = portfolioReturn
        ws.Cells(startRow + i, 3).Value = methodName
    Next i
End Sub
