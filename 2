Option Explicit

' Constants pour la configuration du portefeuille
Const ESG_RATIO As Double = 0.7
Const CRYPTO_RATIO As Double = 0.3
Const MAX_WEIGHT_PER_ASSET As Double = 0.15
Const MAX_CRYPTO_VOL_CONTRIB As Double = 0.4
Const RISK_FREE_RATE As Double = 0

' Indices des actifs
Const FIRST_ESG_ASSET As Integer = 2 ' Colonne B
Const LAST_ESG_ASSET As Integer = 11 ' Colonne K (10 actifs ESG)
Const FIRST_CRYPTO_ASSET As Integer = 12 ' Colonne L
Const LAST_CRYPTO_ASSET As Integer = 14 ' Colonne N (3 cryptomonnaies)

' Sous-procédure principale
Sub OptimiserPortefeuille()
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    ' Créer des feuilles pour les résultats s'ils n'existent pas
    CreateSheetsIfNotExist
    
    ' Étape 1: Lire les données et calculer les rendements
    Dim dataRange As Range
    Set dataRange = Sheets("Data").Range("A1:N1293")
    
    Dim returns As Variant
    Dim nbAssets As Integer
    nbAssets = LAST_CRYPTO_ASSET - FIRST_ESG_ASSET + 1 ' Nombre total d'actifs
    
    returns = CalculateReturns(dataRange)
    
    ' Étape 2: Calculer les matrices nécessaires pour l'optimisation
    Dim meanReturns As Variant
    Dim covMatrix As Variant
    
    meanReturns = CalculateMeanReturns(returns)
    covMatrix = CalculateCovarianceMatrix(returns)
    
    ' Étape 3: Optimiser avec les différentes méthodes
    Dim resultsMV As Variant
    Dim resultsCF As Variant
    Dim resultsLPM As Variant
    Dim resultsMEG As Variant
    
    ' Optimisation de Markowitz (Mean-Variance)
    resultsMV = OptimizeMeanVariance(meanReturns, covMatrix)
    
    ' Optimisation Mean-VaR Cornish-Fisher
    resultsCF = OptimizeMeanVaRCornishFisher(returns, meanReturns, covMatrix)
    
    ' Optimisation Mean-Lower Partial Moment
    resultsLPM = OptimizeMeanLPM(returns, meanReturns)
    
    ' Optimisation Mean-Extended Gini
    resultsMEG = OptimizeMeanExtendedGini(returns, meanReturns)
    
    ' Étape 4: Calculer les performances et comparer les approches
    DisplayResults resultsMV, resultsCF, resultsLPM, resultsMEG, meanReturns, covMatrix, returns
    
    ' Étape 5: Générer les frontières efficientes
    GenerateEfficientFrontier meanReturns, covMatrix, returns
    
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    
    MsgBox "Optimisation de portefeuille terminée! Vérifiez les résultats dans les feuilles créées.", vbInformation
End Sub

' Crée les feuilles nécessaires si elles n'existent pas
Sub CreateSheetsIfNotExist()
    Dim sheetNames As Variant
    sheetNames = Array("Résultats", "Frontières", "Portefeuilles")
    
    Dim i As Integer
    For i = LBound(sheetNames) To UBound(sheetNames)
        If Not SheetExists(sheetNames(i)) Then
            Sheets.Add(After:=Sheets(Sheets.Count)).Name = sheetNames(i)
        Else
            Sheets(sheetNames(i)).Cells.Clear
        End If
    Next i
End Sub

' Vérifie si une feuille existe
Function SheetExists(sheetName As String) As Boolean
    Dim ws As Worksheet
    
    On Error Resume Next
    Set ws = Sheets(sheetName)
    On Error GoTo 0
    
    SheetExists = Not ws Is Nothing
End Function

' Calcule les rendements à partir des prix
Function CalculateReturns(dataRange As Range) As Variant
    Dim nbRows As Long
    Dim nbCols As Long
    
    nbRows = dataRange.Rows.Count - 1 ' -1 car on calcule les rendements
    nbCols = LAST_CRYPTO_ASSET - FIRST_ESG_ASSET + 1
    
    Dim returns() As Double
    ReDim returns(1 To nbRows, 1 To nbCols)
    
    Dim i As Long, j As Long
    
    ' Calcul des rendements logarithmiques
    For i = 1 To nbRows
        For j = 1 To nbCols
            If dataRange.Cells(i + 1, j + FIRST_ESG_ASSET - 1).Value > 0 And dataRange.Cells(i, j + FIRST_ESG_ASSET - 1).Value > 0 Then
                returns(i, j) = Log(dataRange.Cells(i + 1, j + FIRST_ESG_ASSET - 1).Value / dataRange.Cells(i, j + FIRST_ESG_ASSET - 1).Value)
            Else
                returns(i, j) = 0
            End If
        Next j
    Next i
    
    CalculateReturns = returns
End Function

' Calcule les rendements moyens
Function CalculateMeanReturns(returns As Variant) As Variant
    Dim nbRows As Long
    Dim nbCols As Long
    
    nbRows = UBound(returns, 1)
    nbCols = UBound(returns, 2)
    
    Dim meanReturns() As Double
    ReDim meanReturns(1 To nbCols)
    
    Dim i As Long, j As Long
    
    For j = 1 To nbCols
        Dim sum As Double
        sum = 0
        
        For i = 1 To nbRows
            sum = sum + returns(i, j)
        Next i
        
        meanReturns(j) = sum / nbRows
    Next j
    
    ' Annualiser les rendements (supposant des données quotidiennes avec ~252 jours de trading)
    For j = 1 To nbCols
        meanReturns(j) = meanReturns(j) * 252
    Next j
    
    CalculateMeanReturns = meanReturns
End Function

' Calcule la matrice de covariance
Function CalculateCovarianceMatrix(returns As Variant) As Variant
    Dim nbRows As Long
    Dim nbCols As Long
    
    nbRows = UBound(returns, 1)
    nbCols = UBound(returns, 2)
    
    Dim meanReturns() As Double
    ReDim meanReturns(1 To nbCols)
    
    Dim i As Long, j As Long, k As Long
    
    ' Calcul des rendements moyens
    For j = 1 To nbCols
        Dim sum As Double
        sum = 0
        
        For i = 1 To nbRows
            sum = sum + returns(i, j)
        Next i
        
        meanReturns(j) = sum / nbRows
    Next j
    
    ' Calcul de la matrice de covariance
    Dim covMatrix() As Double
    ReDim covMatrix(1 To nbCols, 1 To nbCols)
    
    For j = 1 To nbCols
        For k = 1 To nbCols
            Dim covariance As Double
            covariance = 0
            
            For i = 1 To nbRows
                covariance = covariance + (returns(i, j) - meanReturns(j)) * (returns(i, k) - meanReturns(k))
            Next i
            
            covMatrix(j, k) = covariance / (nbRows - 1) * 252 ' Annualisation
        Next k
    Next j
    
    CalculateCovarianceMatrix = covMatrix
End Function

' Optimisation Mean-Variance (Markowitz)
Function OptimizeMeanVariance(meanReturns As Variant, covMatrix As Variant) As Variant
    Dim nbAssets As Integer
    nbAssets = UBound(meanReturns)
    
    ' Définir les contraintes pour le solver
    Dim esgAssets As Integer
    Dim cryptoAssets As Integer
    
    esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
    cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
    
    ' Initialisation des poids (égaux)
    Dim weights() As Double
    ReDim weights(1 To nbAssets)
    
    Dim i As Integer
    For i = 1 To esgAssets
        weights(i) = ESG_RATIO / esgAssets
    Next i
    
    For i = esgAssets + 1 To nbAssets
        weights(i) = CRYPTO_RATIO / cryptoAssets
    Next i
    
    ' Utiliser l'optimisation quadratique pour résoudre le problème
    ' Pour simplifier, nous allons utiliser une optimisation manuelle par étapes
    ' basée sur l'algorithme du gradient projeté
    
    Dim iterations As Long
    Dim learningRate As Double
    Dim bestWeights() As Double
    Dim bestSharpe As Double
    
    ReDim bestWeights(1 To nbAssets)
    bestSharpe = -1000
    
    iterations = 10000
    learningRate = 0.01
    
    ' Optimisation par algorithme de gradient projeté simplifiée
    For i = 1 To iterations
        ' Calculer le portefeuille actuel
        Dim portfolioReturn As Double, portfolioRisk As Double
        portfolioReturn = CalculatePortfolioReturn(weights, meanReturns)
        portfolioRisk = CalculatePortfolioRisk(weights, covMatrix)
        
        ' Calculer le ratio de Sharpe
        Dim sharpeRatio As Double
        sharpeRatio = (portfolioReturn - RISK_FREE_RATE) / portfolioRisk
        
        ' Si meilleur ratio, sauvegarder
        If sharpeRatio > bestSharpe Then
            bestSharpe = sharpeRatio
            For j = 1 To nbAssets
                bestWeights(j) = weights(j)
            Next j
        End If
        
        ' Ajuster les poids vers un meilleur ratio de Sharpe (simplification)
        ' Ici on fait une heuristique simple: diminuer les poids des actifs à risque élevé
        ' et augmenter les poids des actifs à rendement/risque élevé
        For j = 1 To nbAssets
            Dim assetSharpe As Double
            assetSharpe = meanReturns(j) / Sqr(covMatrix(j, j))
            
            ' Ajuster le poids en fonction du ratio de Sharpe de l'actif
            weights(j) = weights(j) + learningRate * (assetSharpe - sharpeRatio)
        Next j
        
        ' Projeter sur les contraintes
        weights = ProjectOnConstraints(weights, esgAssets, cryptoAssets, covMatrix)
        
        ' Réduire le taux d'apprentissage progressivement
        learningRate = learningRate * 0.9995
    Next i
    
    ' Renvoyer les meilleurs poids trouvés
    OptimizeMeanVariance = bestWeights
End Function

' Optimisation Mean-VaR Cornish-Fisher
Function OptimizeMeanVaRCornishFisher(returns As Variant, meanReturns As Variant, covMatrix As Variant) As Variant
    Dim nbAssets As Integer
    nbAssets = UBound(meanReturns)
    
    ' Calculer les skewness et kurtosis des rendements
    Dim skewness() As Double, kurtosis() As Double
    ReDim skewness(1 To nbAssets)
    ReDim kurtosis(1 To nbAssets)
    
    Dim i As Long, j As Long
    Dim nbObs As Long
    nbObs = UBound(returns, 1)
    
    For j = 1 To nbAssets
        Dim mean As Double, variance As Double
        Dim sumCube As Double, sumQuad As Double
        
        mean = 0
        For i = 1 To nbObs
            mean = mean + returns(i, j)
        Next i
        mean = mean / nbObs
        
        variance = 0
        sumCube = 0
        sumQuad = 0
        
        For i = 1 To nbObs
            Dim diff As Double
            diff = returns(i, j) - mean
            
            variance = variance + diff * diff
            sumCube = sumCube + diff * diff * diff
            sumQuad = sumQuad + diff * diff * diff * diff
        Next i
        
        variance = variance / (nbObs - 1)
        skewness(j) = (sumCube / nbObs) / (variance ^ 1.5)
        kurtosis(j) = (sumQuad / nbObs) / (variance * variance) - 3 ' Excess kurtosis
    Next j
    
    ' Pour simplifier, nous utiliserons les mêmes poids que Markowitz avec une pénalité pour le skewness négatif
    Dim markowitz As Variant
    markowitz = OptimizeMeanVariance(meanReturns, covMatrix)
    
    ' Ajuster les poids en fonction du skewness et kurtosis
    Dim adjustedWeights() As Double
    ReDim adjustedWeights(1 To nbAssets)
    
    ' Ajuster légèrement les poids pour favoriser les actifs avec skewness positif
    For i = 1 To nbAssets
        adjustedWeights(i) = markowitz(i) * (1 + 0.1 * skewness(i))
    Next i
    
    ' Projeter sur les contraintes
    Dim esgAssets As Integer, cryptoAssets As Integer
    esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
    cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
    
    adjustedWeights = ProjectOnConstraints(adjustedWeights, esgAssets, cryptoAssets, covMatrix)
    
    OptimizeMeanVaRCornishFisher = adjustedWeights
End Function

' Optimisation Mean-Lower Partial Moment
Function OptimizeMeanLPM(returns As Variant, meanReturns As Variant) As Variant
    Dim nbAssets As Integer
    nbAssets = UBound(meanReturns)
    
    ' Calculer le Lower Partial Moment pour chaque actif
    Dim lpm() As Double
    ReDim lpm(1 To nbAssets)
    
    Dim i As Long, j As Long, k As Long
    Dim nbObs As Long
    nbObs = UBound(returns, 1)
    
    Dim targetReturn As Double
    targetReturn = 0 ' Seuil de rendement (0 = pas de perte)
    
    For j = 1 To nbAssets
        lpm(j) = 0
        
        For i = 1 To nbObs
            If returns(i, j) < targetReturn Then
                lpm(j) = lpm(j) + (targetReturn - returns(i, j)) ^ 2
            End If
        Next i
        
        lpm(j) = lpm(j) / nbObs
    Next j
    
    ' Initialisation des poids (inversement proportionnels au LPM)
    Dim weights() As Double
    ReDim weights(1 To nbAssets)
    
    Dim sumInvLPM As Double
    sumInvLPM = 0
    
    ' Pour les actifs avec LPM nul, utiliser une valeur minimale
    For j = 1 To nbAssets
        If lpm(j) < 0.0001 Then lpm(j) = 0.0001
        sumInvLPM = sumInvLPM + 1 / lpm(j)
    Next j
    
    ' Calculer les poids initiaux inversement proportionnels au LPM
    For j = 1 To nbAssets
        weights(j) = (1 / lpm(j)) / sumInvLPM
    Next j
    
    ' Projeter sur les contraintes
    Dim esgAssets As Integer, cryptoAssets As Integer
    esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
    cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
    
    ' Ici, nous n'avons pas la matrice de covariance mais nous pouvons la recalculer
    Dim covMatrix As Variant
    covMatrix = CalculateCovarianceMatrix(returns)
    
    Dim projectedWeights As Variant
    projectedWeights = ProjectOnConstraints(weights, esgAssets, cryptoAssets, covMatrix)
    
    OptimizeMeanLPM = projectedWeights
End Function

' Optimisation Mean-Extended Gini
Function OptimizeMeanExtendedGini(returns As Variant, meanReturns As Variant) As Variant
    Dim nbAssets As Integer
    nbAssets = UBound(meanReturns)
    
    ' Pour simplifier, utiliser une approximation basée sur la semi-variance
    Dim semiVariance() As Double
    ReDim semiVariance(1 To nbAssets)
    
    Dim i As Long, j As Long
    Dim nbObs As Long
    nbObs = UBound(returns, 1)
    
    For j = 1 To nbAssets
        Dim mean As Double
        mean = 0
        
        For i = 1 To nbObs
            mean = mean + returns(i, j)
        Next i
        mean = mean / nbObs
        
        semiVariance(j) = 0
        For i = 1 To nbObs
            If returns(i, j) < mean Then
                semiVariance(j) = semiVariance(j) + (returns(i, j) - mean) ^ 2
            End If
        Next i
        
        semiVariance(j) = semiVariance(j) / nbObs
    Next j
    
    ' Initialisation des poids (inversement proportionnels à la semi-variance)
    Dim weights() As Double
    ReDim weights(1 To nbAssets)
    
    Dim sumInvSV As Double
    sumInvSV = 0
    
    For j = 1 To nbAssets
        If semiVariance(j) < 0.0001 Then semiVariance(j) = 0.0001
        sumInvSV = sumInvSV + 1 / semiVariance(j)
    Next j
    
    For j = 1 To nbAssets
        weights(j) = (1 / semiVariance(j)) / sumInvSV
    Next j
    
    ' Projeter sur les contraintes
    Dim esgAssets As Integer, cryptoAssets As Integer
    esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
    cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
    
    ' Recalculer la matrice de covariance
    Dim covMatrix As Variant
    covMatrix = CalculateCovarianceMatrix(returns)
    
    Dim projectedWeights As Variant
    projectedWeights = ProjectOnConstraints(weights, esgAssets, cryptoAssets, covMatrix)
    
    OptimizeMeanExtendedGini = projectedWeights
End Function

' Projeter les poids sur les contraintes du problème
Function ProjectOnConstraints(weights As Variant, esgAssets As Integer, cryptoAssets As Integer, covMatrix As Variant) As Variant
    Dim nbAssets As Integer
    nbAssets = UBound(weights)
    
    Dim i As Integer, j As Integer
    Dim projectedWeights() As Double
    ReDim projectedWeights(1 To nbAssets)
    
    ' Copier les poids
    For i = 1 To nbAssets
        projectedWeights(i) = CDbl(weights(i))
    Next i
    
    ' 1. Contrainte de poids maximum par actif
    For i = 1 To nbAssets
        If projectedWeights(i) > MAX_WEIGHT_PER_ASSET Then
            projectedWeights(i) = MAX_WEIGHT_PER_ASSET
        End If
        If projectedWeights(i) < 0 Then
            projectedWeights(i) = 0
        End If
    Next i
    
    ' 2. Normaliser les poids des actifs ESG pour maintenir 70%
    Dim sumESG As Double
    sumESG = 0
    
    For i = 1 To esgAssets
        sumESG = sumESG + projectedWeights(i)
    Next i
    
    If sumESG > 0 Then
        For i = 1 To esgAssets
            projectedWeights(i) = projectedWeights(i) * ESG_RATIO / sumESG
        Next i
    End If
    
    ' 3. Normaliser les poids des cryptomonnaies pour maintenir 30%
    Dim sumCrypto As Double
    sumCrypto = 0
    
    For i = esgAssets + 1 To nbAssets
        sumCrypto = sumCrypto + projectedWeights(i)
    Next i
    
    If sumCrypto > 0 Then
        For i = esgAssets + 1 To nbAssets
            projectedWeights(i) = projectedWeights(i) * CRYPTO_RATIO / sumCrypto
        Next i
    End If
    
    ' 4. Vérifier la contribution à la volatilité des cryptomonnaies
    ' Calculer la volatilité totale du portefeuille
    Dim portfolioRisk As Double
    portfolioRisk = CalculatePortfolioRisk(projectedWeights, covMatrix)
    
    ' Calculer la contribution des cryptos à la volatilité
    Dim cryptoContrib As Double
    cryptoContrib = 0
    
    For i = esgAssets + 1 To nbAssets
        For j = 1 To nbAssets
            cryptoContrib = cryptoContrib + projectedWeights(i) * projectedWeights(j) * covMatrix(i, j)
        Next j
    Next i
    
    cryptoContrib = cryptoContrib / (portfolioRisk ^ 2)
    
    ' Si la contribution est trop élevée, ajuster les poids des cryptos
    If cryptoContrib > MAX_CRYPTO_VOL_CONTRIB Then
        Dim adjustFactor As Double
        adjustFactor = Sqr(MAX_CRYPTO_VOL_CONTRIB / cryptoContrib)
        
        ' Réduire les poids des cryptos
        For i = esgAssets + 1 To nbAssets
            projectedWeights(i) = projectedWeights(i) * adjustFactor
        Next i
        
        ' Augmenter les poids des ESG pour compenser
        Dim totalCryptoReduc As Double
        totalCryptoReduc = CRYPTO_RATIO * (1 - adjustFactor)
        
        For i = 1 To esgAssets
            projectedWeights(i) = projectedWeights(i) * (ESG_RATIO + totalCryptoReduc) / ESG_RATIO
        Next i
    End If
    
    ProjectOnConstraints = projectedWeights
End Function

' Calculer le rendement du portefeuille
Function CalculatePortfolioReturn(weights As Variant, meanReturns As Variant) As Double
    Dim portfolioReturn As Double
    portfolioReturn = 0
    
    Dim i As Integer
    For i = 1 To UBound(weights)
        portfolioReturn = portfolioReturn + weights(i) * meanReturns(i)
    Next i
    
    CalculatePortfolioReturn = portfolioReturn
End Function

' Calculer le risque (écart-type) du portefeuille
Function CalculatePortfolioRisk(weights As Variant, covMatrix As Variant) As Double
    Dim portfolioRisk As Double
    portfolioRisk = 0
    
    Dim i As Integer, j As Integer
    For i = 1 To UBound(weights)
        For j = 1 To UBound(weights)
            portfolioRisk = portfolioRisk + weights(i) * weights(j) * covMatrix(i, j)
        Next j
    Next i
    
    CalculatePortfolioRisk = Sqr(portfolioRisk)
End Function

' Afficher les résultats
Sub DisplayResults(resultsMV As Variant, resultsCF As Variant, resultsLPM As Variant, resultsMEG As Variant, _
                  meanReturns As Variant, covMatrix As Variant, returns As Variant)
    Dim ws As Worksheet
    Set ws = Sheets("Résultats")
    
    ' En-têtes
    ws.Range("A1").Value = "Méthode d'optimisation"
    ws.Range("B1").Value = "Rendement"
    ws.Range("C1").Value = "Risque"
    ws.Range("D1").Value = "Ratio de Sharpe"
    
    ' Créer en-têtes pour les poids des actifs
    Dim esgAssets As Integer
    Dim cryptoAssets As Integer
    
    esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
    cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
    
    Dim i As Integer
    For i = 1 To esgAssets
        ws.Cells(1, 4 + i).Value = "ESG " & i
    Next i
    
    For i = 1 To cryptoAssets
        ws.Cells(1, 4 + esgAssets + i).Value = "Crypto " & i
    Next i
    
    ' Ajouter les résultats de chaque méthode
    ' Markowitz
    ws.Range("A2").Value = "Mean-Variance (Markowitz)"
    ws.Range("B2").Value = CalculatePortfolioReturn(resultsMV, meanReturns)
    ws.Range("C2").Value = CalculatePortfolioRisk(resultsMV, covMatrix)
    ws.Range("D2").Value = (ws.Range("B2").Value - RISK_FREE_RATE) / ws.Range("C2").Value
    
    For i = 1 To UBound(resultsMV)
        ws.Cells(2, 4 + i).Value = resultsMV(i)
    Next i
    
    ' Cornish-Fisher
    ws.Range("A3").Value = "Mean-VaR Cornish-Fisher"
    ws.Range("B3").Value = CalculatePortfolioReturn(resultsCF, meanReturns)
    ws.Range("C3").Value = CalculatePortfolioRisk(resultsCF, covMatrix)
    ws.Range("D3").Value = (ws.Range("B3").Value - RISK_FREE_RATE) / ws.Range("C3").Value
    
    For i = 1 To UBound(resultsCF)
        ws.Cells(3, 4 + i).Value = resultsCF(i)
    Next i
    
    ' LPM
    ws.Range("A4").Value = "Mean-Lower Partial Moment"
    ws.Range("B4").Value = CalculatePortfolioReturn(resultsLPM, meanReturns)
    ws.Range("C4").Value = CalculatePortfolioRisk(resultsLPM, covMatrix)
    ws.Range("D4").Value = (ws.Range("B4").Value - RISK_FREE_RATE) / ws.Range("C4").Value
    
    For i = 1 To UBound(resultsLPM)
        ws.Cells(4, 4 + i).Value = resultsLPM(i)
    Next i
    
    ' MEG
    ws.Range("A5").Value = "Mean-Extended Gini"
    ws.Range("B5").Value = CalculatePortfolioReturn(resultsMEG, meanReturns)
    ws.Range("C5").Value = CalculatePortfolioRisk(resultsMEG, covMatrix)
    ws.Range("D5").Value = (ws.Range("B5").Value - RISK_FREE_RATE) / ws.Range("C5").Value
    
    For i = 1 To UBound(resultsMEG)
        ws.Cells(5, 4 + i).Value = resultsMEG(i)
    Next i
    
    ' Déterminer la meilleure approche selon le ratio de Sharpe
    Dim maxSharpe As Double
    Dim bestRow As Integer
    
    maxSharpe = ws.Range("D2").Value
    bestRow = 2
    
    For i = 3 To 5
        If ws.Cells(i, 4).Value > maxSharpe Then
            maxSharpe = ws.Cells(i, 4).Value
            bestRow = i
        End If
    Next i
    
    ' Mettre en évidence la meilleure méthode
    ws.Range("A" & bestRow & ":D" & bestRow).Interior.Color = RGB(200, 255, 200)
    
    ' Ajouter la conclusion
    ws.Range("A7").Value = "Conclusion:"
    ws.Range("A8").Value = "La méthode la plus performante selon le ratio de Sharpe est: " & ws.Cells(bestRow, 1).Value
    ws.Range("A9").Value = "Avec un ratio de Sharpe de: " & Round(maxSharpe, 4)
    
    ' Formater la feuille
    ws.Range("A1:Z1").Font.Bold = True
    ws.Columns("A:Z").AutoFit
    
    ' Créer un graphique comparant les performances
    Dim chartObj As ChartObject
    Set chartObj = ws.ChartObjects.Add(Left:=50, Width:=450, Top:=200, Height:=250)
    
    With chartObj.Chart
        .ChartType = xlColumnClustered
        .SetSourceData Source:=ws.Range("A1:D5")
        .HasTitle = True
        .ChartTitle.Text = "Comparaison des méthodes d'optimisation"
        .Axes(xlValue).HasTitle = True
        .Axes(xlValue).AxisTitle.Text = "Valeur"
        .Axes(xlCategory).HasTitle = True
        .Axes(xlCategory).AxisTitle.Text = "Métrique"
        .HasLegend = True
        .Legend.Position = xlLegendPositionBottom
    End With
End Sub

' Générer la frontière efficiente
Sub GenerateEfficientFrontier(meanReturns As Variant, covMatrix As Variant, returns As Variant)
    Dim ws As Worksheet
    Set ws = Sheets("Frontières")
    
    ' En-têtes
    ws.Range("A1").Value = "Risque"
    ws.Range("B1").Value = "Rendement"
    ws.Range("C1").Value = "Méthode"
    
    ' Générer des portefeuilles sur la frontière pour chaque méthode
    Dim nbPoints As Integer
    nbPoints = 20
    
    ' Pour Markowitz
    GenerateFrontierPoints meanReturns, covMatrix, "Mean-Variance", ws, 2, nbPoints
    
    ' Pour les autres méthodes, utiliser les poids optimaux comme point de départ
    ' et varier le niveau de risque
    Dim resultsCF As Variant
    Dim resultsLPM As Variant
    Dim resultsMEG As Variant
    
    resultsCF = OptimizeMeanVaRCornishFisher(returns, meanReturns, covMatrix)
    resultsLPM = OptimizeMeanLPM(returns, meanReturns)
    resultsMEG = OptimizeMeanExtendedGini(returns, meanReturns)
    
    GenerateFrontierPoints meanReturns, covMatrix, "Mean-VaR CF", ws, 2 + nbPoints, nbPoints, resultsCF
    GenerateFrontierPoints meanReturns, covMatrix, "Mean-LPM", ws, 2 + 2 * nbPoints, nbPoints, resultsLPM
    GenerateFrontierPoints meanReturns, covMatrix, "Mean-Gini", ws, 2 + 3 * nbPoints, nbPoints, resultsMEG
    
    ' Créer un graphique de la frontière efficiente
    Dim chartObj As ChartObject
    Set chartObj = ws.ChartObjects.Add(Left:=350, Width:=500, Top:=50, Height:=400)
    
    With chartObj.Chart
        .ChartType = xlXYScatterSmooth
        .SetSourceData Source:=ws.Range("A2:C" & (2 + 4 * nbPoints - 1))
        .HasTitle = True
        .ChartTitle.Text = "Frontières Efficientes"
        .Axes(xlValue).HasTitle = True
        .Axes(xlValue).AxisTitle.Text = "Rendement"
        .Axes(xlCategory).HasTitle = True
        .Axes(xlCategory).AxisTitle.Text = "Risque"
        .HasLegend = True
        .Legend.Position = xlLegendPositionBottom
        
        ' Ajouter des séries par méthode
        .SeriesCollection(1).Name = "Mean-Variance"
        
        Dim series2 As Series
        Set series2 = .SeriesCollection.NewSeries
        series2.XValues = ws.Range("A" & (2 + nbPoints) & ":A" & (2 + 2 * nbPoints - 1))
        series2.Values = ws.Range("B" & (2 + nbPoints) & ":B" & (2 + 2 * nbPoints - 1))
        series2.Name = "Mean-VaR CF"
        
        Dim series3 As Series
        Set series3 = .SeriesCollection.NewSeries
        series3.XValues = ws.Range("A" & (2 + 2 * nbPoints) & ":A" & (2 + 3 * nbPoints - 1))
        series3.Values = ws.Range("B" & (2 + 2 * nbPoints) & ":B" & (2 + 3 * nbPoints - 1))
        series3.Name = "Mean-LPM"
        
        Dim series4 As Series
        Set series4 = .SeriesCollection.NewSeries
        series4.XValues = ws.Range("A" & (2 + 3 * nbPoints) & ":A" & (2 + 4 * nbPoints - 1))
        series4.Values = ws.Range("B" & (2 + 3 * nbPoints) & ":B" & (2 + 4 * nbPoints - 1))
        series4.Name = "Mean-Gini"
    End With
    
    ' Formater la feuille
    ws.Range("A1:C1").Font.Bold = True
    ws.Columns("A:C").AutoFit
End Sub

' Générer des points sur la frontière efficiente
Sub GenerateFrontierPoints(meanReturns As Variant, covMatrix As Variant, methodName As String, _
                          ws As Worksheet, startRow As Integer, nbPoints As Integer, Optional initialWeights As Variant = Empty)
    Dim nbAssets As Integer
    nbAssets = UBound(meanReturns)
    
    ' Si les poids initiaux ne sont pas fournis, utiliser une répartition égale
    Dim weights() As Double
    ReDim weights(1 To nbAssets)
    
    Dim i As Integer
    
    If initialWeights = Empty Then
        For i = 1 To nbAssets
            weights(i) = 1 / nbAssets
        Next i
    Else
        For i = 1 To nbAssets
            weights(i) = initialWeights(i)
        Next i
    End If
    
    ' Calculer le risque et le rendement du portefeuille initial
    Dim initialReturn As Double, initialRisk As Double
    initialReturn = CalculatePortfolioReturn(weights, meanReturns)
    initialRisk = CalculatePortfolioRisk(weights, covMatrix)
    
    ' Générer des portefeuilles avec différents niveaux de risque
    Dim esgAssets As Integer, cryptoAssets As Integer
    esgAssets = LAST_ESG_ASSET - FIRST_ESG_ASSET + 1
    cryptoAssets = LAST_CRYPTO_ASSET - FIRST_CRYPTO_ASSET + 1
    
    For i = 0 To nbPoints - 1
        ' Ajuster les poids pour cibler un niveau de risque différent
        Dim targetRisk As Double
        targetRisk = initialRisk * (0.7 + i * 0.03) ' Varier le risque de 70% à 130% du risque initial
        
        ' Ajuster les poids vers l'actif avec le meilleur rendement/risque pour augmenter le risque
        ' ou vers l'actif avec le pire rendement/risque pour diminuer le risque
        Dim tempWeights() As Double
        ReDim tempWeights(1 To nbAssets)
        
        ' Copier les poids initiaux
        Dim j As Integer
        For j = 1 To nbAssets
            tempWeights(j) = weights(j)
        Next j
        
        ' Trouver le meilleur et le pire actif en termes de rendement/risque
        Dim bestAsset As Integer, worstAsset As Integer
        Dim bestRatio As Double, worstRatio As Double
        
        bestRatio = meanReturns(1) / Sqr(covMatrix(1, 1))
        worstRatio = bestRatio
        bestAsset = 1
        worstAsset = 1
        
        For j = 2 To nbAssets
            Dim ratio As Double
            ratio = meanReturns(j) / Sqr(covMatrix(j, j))
            
            If ratio > bestRatio Then
                bestRatio = ratio
                bestAsset = j
            End If
            
            If ratio < worstRatio Then
                worstRatio = ratio
                worstAsset = j
            End If
        Next j
        
        ' Ajuster les poids pour cibler un niveau de risque différent
        Dim adjustFactor As Double
        If targetRisk > initialRisk Then
            ' Augmenter le poids de l'actif le plus risqué
            For j = 1 To 5 ' Quelques itérations pour approcher le risque cible
                adjustFactor = 0.02 ' Petit ajustement à chaque itération
                
                ' Augmenter le poids de l'actif le plus risqué (celui avec la plus grande variance)
                Dim highestVar As Double, riskiestAsset As Integer
                highestVar = covMatrix(1, 1)
                riskiestAsset = 1
                
                For k = 2 To nbAssets
                    If covMatrix(k, k) > highestVar Then
                        highestVar = covMatrix(k, k)
                        riskiestAsset = k
                    End If
                Next k
                
                ' Ajuster les poids
                If tempWeights(riskiestAsset) < MAX_WEIGHT_PER_ASSET Then
                    tempWeights(riskiestAsset) = tempWeights(riskiestAsset) + adjustFactor
                    
                    ' Réduire proportionnellement les autres poids
                    For k = 1 To nbAssets
                        If k <> riskiestAsset Then
                            tempWeights(k) = tempWeights(k) * (1 - adjustFactor)
                        End If
                    Next k
                    
                    ' Projeter sur les contraintes
                    tempWeights = ProjectOnConstraints(tempWeights, esgAssets, cryptoAssets, covMatrix)
                    
                    ' Calculer le nouveau risque
                    Dim currentRisk As Double
                    currentRisk = CalculatePortfolioRisk(tempWeights, covMatrix)
                    
                    ' Si nous avons dépassé le risque cible, arrêter
                    If currentRisk >= targetRisk Then
                        Exit For
                    End If
                End If
            Next j
        Else
            ' Diminuer le risque en augmentant le poids de l'actif le moins risqué
            For j = 1 To 5 ' Quelques itérations pour approcher le risque cible
                adjustFactor = 0.02 ' Petit ajustement à chaque itération
                
                ' Trouver l'actif le moins risqué
                Dim lowestVar As Double, safestAsset As Integer
                lowestVar = covMatrix(1, 1)
                safestAsset = 1
                
                For k = 2 To nbAssets
                    If covMatrix(k, k) < lowestVar Then
                        lowestVar = covMatrix(k, k)
                        safestAsset = k
                    End If
                Next k
                
                ' Ajuster les poids
                If tempWeights(safestAsset) < MAX_WEIGHT_PER_ASSET Then
                    tempWeights(safestAsset) = tempWeights(safestAsset) + adjustFactor
                    
                    ' Réduire proportionnellement les autres poids
                    For k = 1 To nbAssets
                        If k <> safestAsset Then
                            tempWeights(k) = tempWeights(k) * (1 - adjustFactor)
                        End If
                    Next k
                    
                    ' Projeter sur les contraintes
                    tempWeights = ProjectOnConstraints(tempWeights, esgAssets, cryptoAssets, covMatrix)
                    
                    ' Calculer le nouveau risque
                    Dim newRisk As Double
                    newRisk = CalculatePortfolioRisk(tempWeights, covMatrix)
                    
                    ' Si nous sommes suffisamment proches du risque cible, arrêter
                    If newRisk <= targetRisk Then
                        Exit For
                    End If
                End If
            Next j
        End If
        
        ' Calculer le risque et le rendement du portefeuille ajusté
        Dim portfolioRisk As Double, portfolioReturn As Double
        portfolioRisk = CalculatePortfolioRisk(tempWeights, covMatrix)
        portfolioReturn = CalculatePortfolioReturn(tempWeights, meanReturns)
        
        ' Enregistrer les résultats
        ws.Cells(startRow + i, 1).Value = portfolioRisk
        ws.Cells(startRow + i, 2).Value = portfolioReturn
        ws.Cells(startRow + i, 3).Value = methodName
    Next i
End Sub
